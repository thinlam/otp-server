import express from 'express';
import nodemailer from 'nodemailer';
import dotenv from 'dotenv';
import cors from 'cors';
import admin from 'firebase-admin';
import bcrypt from 'bcryptjs';

dotenv.config();
const app = express();
app.use(cors());
app.use(express.json());

/* ==============================
   Firebase Admin init (robust)
   ============================== */
function parseServiceAccount() {
  let raw = process.env.SERVICE_ACCOUNT_KEY;
  if (!raw) throw new Error('Missing SERVICE_ACCOUNT_KEY');

  // N·∫øu bi·∫øn m√¥i tr∆∞·ªùng b·ªã b·ªçc nh√°y, g·ª° nh√°y
  if ((raw.startsWith('"') && raw.endsWith('"')) || (raw.startsWith("'") && raw.endsWith("'"))) {
    raw = raw.slice(1, -1);
  }

  // Th·ª≠ decode URI (n·∫øu ƒë∆∞·ª£c set b·∫±ng github actions/railway)
  try { raw = decodeURIComponent(raw); } catch {}

  // C√≥ th·ªÉ l√† JSON plain ho·∫∑c base64
  let jsonStr = raw;
  try {
    // N·∫øu l√† base64, decode ra JSON string
    if (!raw.trim().startsWith('{')) {
      jsonStr = Buffer.from(raw, 'base64').toString('utf8');
    }
  } catch {}
  const serviceAccount = JSON.parse(jsonStr);

  // S·ª≠a xu·ªëng d√≤ng trong private_key
  if (serviceAccount.private_key && serviceAccount.private_key.includes('\\n')) {
    serviceAccount.private_key = serviceAccount.private_key.replace(/\\n/g, '\n');
  }
  return serviceAccount;
}

const serviceAccount = parseServiceAccount();
if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
  });
}
const db = admin.firestore();

/* ==============================
   Email transporter (Gmail App Password)
   ============================== */
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER, // v√≠ d·ª•: yourname@gmail.com
    pass: process.env.EMAIL_PASS, // App Password 16 k√Ω t·ª±
  },
});

/* ==============================
   Helper
   ============================== */
const OTP_TTL_MS = 60 * 1000; // 1 ph√∫t
const RESEND_COOLDOWN_MS = 60 * 1000; // c≈©ng 1 ph√∫t

function genOTP() {
  return Math.floor(100000 + Math.random() * 900000).toString();
}

function otpDocId(email) {
  // Gom otp theo email (1 doc/email) ƒë·ªÉ d·ªÖ ki·ªÉm so√°t cooldown/resend
  return Buffer.from(email.trim().toLowerCase()).toString('base64url');
}

/* ==============================
   API: G·ª≠i OTP (1 ph√∫t)
   ============================== */
app.post('/send-otp', async (req, res) => {
  try {
    const { email } = req.body || {};
    if (!email || typeof email !== 'string') {
      return res.status(400).json({ success: false, message: 'Email kh√¥ng h·ª£p l·ªá' });
    }

    const docId = otpDocId(email);
    const ref = db.collection('otp_codes').doc(docId);
    const snap = await ref.get();

    // N·∫øu ƒë√£ c√≥ OTP c√≤n h·∫°n => kh√¥ng cho g·ª≠i m·ªõi (cooldown)
    if (snap.exists) {
      const data = snap.data();
      const now = Date.now();
      if (data?.expiresAt && data.expiresAt.toMillis() > now) {
        const leftMs = data.expiresAt.toMillis() - now;
        // N·∫øu c√≤n h·∫°n < 60s th√¨ v·∫´n coi nh∆∞ ƒëang cooldown
        if (leftMs > 0) {
          const leftSec = Math.ceil(leftMs / 1000);
          return res.status(429).json({
            success: false,
            message: `Vui l√≤ng ƒë·ª£i ${leftSec}s tr∆∞·ªõc khi g·ª≠i l·∫°i.`,
            cooldown: leftSec,
          });
        }
      }
      // H·∫øt h·∫°n th√¨ cho overwrite
    }

    const otp = genOTP();
    const otpHash = await bcrypt.hash(otp, 10);
    const now = Date.now();
    const expiresAt = new Date(now + OTP_TTL_MS);

    await ref.set({
      email: email.trim().toLowerCase(),
      otpHash,
      used: false,
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      expiresAt: admin.firestore.Timestamp.fromDate(expiresAt),
      lastSentAt: admin.firestore.FieldValue.serverTimestamp(),
    });

    const mailOptions = {
      from: `English For Beginners <${process.env.EMAIL_USER}>`,
      to: email,
      subject: 'M√£ x√°c th·ª±c OTP c·ªßa b·∫°n',
      html: `
        <div style="font-family: Arial, sans-serif; color: #333; padding: 20px;">
          <h2 style="color: #6C63FF;">üîê X√°c minh t√†i kho·∫£n EFB</h2>
          <p>Ch√†o b·∫°n,</p>
          <p>B·∫°n (ho·∫∑c ai ƒë√≥) v·ª´a y√™u c·∫ßu m√£ OTP ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n tr√™n <strong>English For Beginners</strong>.</p>
          <p style="margin: 20px 0; font-size: 18px;">
            M√£ x√°c th·ª±c c·ªßa b·∫°n l√†:
            <br/>
            <span style="display: inline-block; margin-top: 10px; padding: 12px 24px; background-color: #f4f4f4; border-radius: 8px; font-size: 26px; font-weight: bold; color: #6C63FF;">
              ${otp}
            </span>
          </p>
          <p><strong>L∆∞u √Ω:</strong> M√£ c√≥ hi·ªáu l·ª±c trong <strong>1 ph√∫t</strong> k·ªÉ t·ª´ l√∫c g·ª≠i.</p>
          <p>Vui l√≤ng kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai ƒë·ªÉ b·∫£o v·ªá t√†i kho·∫£n c·ªßa b·∫°n.</p>
          <p>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, h√£y b·ªè qua email n√†y.</p>
          <hr style="margin: 30px 0;" />
          <p style="font-size: 14px; color: #999;">
            Tr√¢n tr·ªçng,<br/>
            ƒê·ªôi ng≈© <strong>EFB - English For Beginners</strong>
          </p>
        </div>
      `,
    };

    await transporter.sendMail(mailOptions);
    // Kh√¥ng tr·∫£ OTP v·ªÅ client ƒë·ªÉ tr√°nh l·ªô
    return res.json({ success: true, message: 'ƒê√£ g·ª≠i OTP. H·∫øt h·∫°n sau 1 ph√∫t.' });
  } catch (err) {
    console.error('‚ùå L·ªói g·ª≠i OTP:', err);
    return res.status(500).json({ success: false, message: 'Kh√¥ng g·ª≠i ƒë∆∞·ª£c OTP' });
  }
});

/* ==============================
   API: X√°c th·ª±c OTP
   ============================== */
app.post('/verify-otp', async (req, res) => {
  try {
    const { email, otp } = req.body || {};
    if (!email || !otp) {
      return res.status(400).json({ success: false, message: 'Thi·∫øu email ho·∫∑c otp' });
    }

    const docId = otpDocId(email);
    const ref = db.collection('otp_codes').doc(docId);
    const snap = await ref.get();
    if (!snap.exists) {
      return res.status(400).json({ success: false, message: 'OTP kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n' });
    }
    const data = snap.data();

    // H·∫øt h·∫°n?
    const now = Date.now();
    if (!data?.expiresAt || data.expiresAt.toMillis() <= now) {
      // xo√° lu√¥n doc c≈©
      await ref.delete().catch(() => {});
      return res.status(400).json({ success: false, message: 'OTP ƒë√£ h·∫øt h·∫°n' });
    }

    // ƒê√£ d√πng?
    if (data.used) {
      return res.status(400).json({ success: false, message: 'OTP ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng' });
    }

    // So kh·ªõp OTP
    const ok = await bcrypt.compare(String(otp), data.otpHash || '');
    if (!ok) {
      return res.status(400).json({ success: false, message: 'OTP kh√¥ng ƒë√∫ng' });
    }

    // Th√†nh c√¥ng: ƒë√°nh d·∫•u used v√† xo√° (tu·ª≥ ch·ªçn). ·ªû ƒë√¢y xo√° lu√¥n cho s·∫°ch.
    await ref.delete();

    return res.json({ success: true, message: 'X√°c th·ª±c OTP th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói verify OTP:', err);
    return res.status(500).json({ success: false, message: 'L·ªói m√°y ch·ªß khi x√°c th·ª±c OTP' });
  }
});

/* ==============================
   API: Reset m·∫≠t kh·∫©u Firebase
   ============================== */
app.post('/reset-password', async (req, res) => {
  try {
    const { email, newPassword } = req.body || {};
    if (!email || !newPassword) {
      return res.status(400).json({ success: false, message: 'Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u m·ªõi' });
    }

    const user = await admin.auth().getUserByEmail(email);
    await admin.auth().updateUser(user.uid, { password: newPassword });

    return res.json({ success: true, message: 'ƒê√£ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng' });
  } catch (error) {
    console.error('‚ùå L·ªói c·∫≠p nh·∫≠t m·∫≠t kh·∫©u:', error);
    // N·∫øu email kh√¥ng t·ªìn t·∫°i
    if (String(error?.message || '').toLowerCase().includes('no user record')) {
      return res.status(404).json({ success: false, message: 'Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng' });
    }
    return res.status(500).json({ success: false, message: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u' });
  }
});

/* ==============================
   Start server
   ============================== */
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`‚úÖ Server is running on port ${PORT}`);
});
