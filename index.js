import express from 'express';
import nodemailer from 'nodemailer';
import dotenv from 'dotenv';
import cors from 'cors';
import admin from 'firebase-admin';

dotenv.config();
const app = express();
app.use(cors());
app.use(express.json());

// ‚úÖ Load Firebase service account
const serviceAccount = JSON.parse(process.env.SERVICE_ACCOUNT_KEY);

// ‚ö†Ô∏è Fix l·ªói xu·ªëng d√≤ng trong private_key
if (serviceAccount.private_key.includes('\\n')) {
  serviceAccount.private_key = serviceAccount.private_key.replace(/\\n/g, '\n');
}

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
});

// üì® G·ª≠i OTP
app.post('/send-otp', async (req, res) => {
  const { email } = req.body;

  // ‚úÖ T·∫°o m√£ OTP 6 ch·ªØ s·ªë
  const otp = Math.floor(100000 + Math.random() * 900000).toString();

  // ‚úâÔ∏è C·∫•u h√¨nh g·ª≠i Gmail
  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER,     // Gmail b·∫°n
      pass: process.env.EMAIL_PASS,     // M·∫≠t kh·∫©u ·ª©ng d·ª•ng Gmail
    },
  });

  const mailOptions = {
  from: `English For Beginner <${process.env.EMAIL_USER}>`,
  to: email,
  subject: 'M√£ x√°c th·ª±c OTP c·ªßa b·∫°n',
  html: `
    <div style="font-family: Arial, sans-serif; color: #333; padding: 20px;">
      <h2 style="color: #6C63FF;">üîê X√°c minh t√†i kho·∫£n EFB</h2>

      <p>Ch√†o b·∫°n,</p>

      <p>B·∫°n (ho·∫∑c ai ƒë√≥) v·ª´a y√™u c·∫ßu m√£ OTP ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n tr√™n <strong>English For Beginners</strong>.</p>

      <p style="margin: 20px 0; font-size: 18px;">
        M√£ x√°c th·ª±c c·ªßa b·∫°n l√†:
        <br/>
        <span style="display: inline-block; margin-top: 10px; padding: 12px 24px; background-color: #f4f4f4; border-radius: 8px; font-size: 26px; font-weight: bold; color: #6C63FF;">
          ${otp}
        </span>
      </p>

      <p>Vui l√≤ng kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai ƒë·ªÉ b·∫£o v·ªá t√†i kho·∫£n c·ªßa b·∫°n.</p>

      <p>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, h√£y b·ªè qua email n√†y.</p>

      <hr style="margin: 30px 0;" />

      <p style="font-size: 14px; color: #999;">
        Tr√¢n tr·ªçng,<br/>
        ƒê·ªôi ng≈© <strong>EFB - English For Beginners</strong>
      </p>
    </div>
  `,
};

  try {
    console.log(`‚úÖ ƒêang g·ª≠i OTP ƒë·∫øn ${email}...`);
    await transporter.sendMail(mailOptions);
    res.json({ success: true, message: 'ƒê√£ g·ª≠i OTP', otp });
  } catch (error) {
    console.error('‚ùå L·ªói g·ª≠i OTP:', error);
    res.status(500).json({ success: false, message: 'Kh√¥ng g·ª≠i ƒë∆∞·ª£c OTP' });
  }
});

// üîê Reset m·∫≠t kh·∫©u Firebase
// üîê Reset m·∫≠t kh·∫©u Firebase (fix)
app.post('/reset-password', async (req, res) => {
  try {
    const email = String(req.body?.email || '').trim().toLowerCase();
    const newPassword = String(req.body?.newPassword || '');

    if (!email || !newPassword) {
      return res.status(400).json({ success: false, message: 'Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u m·ªõi' });
    }

    const user = await admin.auth().getUserByEmail(email);
    await admin.auth().updateUser(user.uid, { password: newPassword });

    return res.json({ success: true, message: 'ƒê√£ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng' });
  } catch (error) {
    console.error('‚ùå L·ªói c·∫≠p nh·∫≠t m·∫≠t kh·∫©u:', error);

    // Email kh√¥ng t·ªìn t·∫°i trong project hi·ªán t·∫°i
    if (error?.code === 'auth/user-not-found') {
      return res.status(404).json({ success: false, message: 'Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng' });
    }

    // C√°c l·ªói kh√°c
    return res.status(500).json({ success: false, message: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u' });
  }
});


// üöÄ Kh·ªüi ƒë·ªông server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`‚úÖ Server is running on port ${PORT}`);
});
